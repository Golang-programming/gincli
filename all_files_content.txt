// ./all_files_content.txt



// ./analyze.sh
#!/bin/bash

output_file="all_files_content.txt"

> "$output_file"

function append_file_contents() {
    local dir="$1"

    for entry in "$dir"/*; do
        if [ -d "$entry" ]; then
            append_file_contents "$entry"
        elif [ -f "$entry" ]; then
            echo "// ${entry#$PWD/}" >> "$output_file"
            cat "$entry" >> "$output_file"
            echo -e "\n\n" >> "$output_file"
        fi
    done
}

append_file_contents "."

echo "All file contents have been written to $output_file."



// ./cmd/new/generate.go
package new

import (
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/briandowns/spinner"
	"github.com/golang-programming/gincli/utils"
)

func generateProjectFiles(projectDir string) {
	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Generating project files..."
	s.Start()
	defer s.Stop()

	templates := map[string]string{
		"templates/new-app/.env.tpl":                         ".env",
		"templates/new-app/loadEnv.go.tpl":                   "loadEnv.go",
		"templates/new-app/app/service/service.go.tpl":       "app/service/service.go",
		"templates/new-app/app/utils/sum-to-numbers.go.tpl":  "app/utils/sum-to-numbers.go",
		"templates/new-app/Dockerfile.tpl":                   "Dockerfile",
		"templates/new-app/main.go.tpl":                      "main.go",
		"templates/new-app/routes.go.tpl":                    "routes.go",
		"templates/new-app/app/controller/controller.go.tpl": "app/controller/controller.go",
	}

	if strings.ToLower(dbType) != "sqlite" {
		templates["templates/new-app/app/pkg/database/database.go.tpl"] = "app/pkg/database/database.go"
		templates["templates/new-app/docker-compose.yml.tpl"] = "docker-compose.yml"
	} else {
		templates["templates/new-app/app/pkg/database/sqlite-database.go.tpl"] = "app/pkg/database/database.go"
	}

	for tpl, output := range templates {
		utils.GenerateFileFromTemplate(tpl, filepath.Join(projectDir, output), getConfig())
	}

}

func getConfig() map[string]string {
	dbDriver := strings.ToLower(dbType)

	return map[string]string{
		"DBUsername": dbUsername,
		"DBPassword": dbPassword,
		"DBName":     dbName,
		"DBHost":     dbHost,
		"DBPort":     dbPort,
		"AppName":    appName,
		"Module":     appName,
		"DBDriver":   dbDriver,
	}
}

func setupProjectDirectories() {
	var directoriesPaths []string = []string{
		appName + "/app/pkg/database",
		appName + "/app/service",
		appName + "/app/utils",
		appName + "/app/controller",
	}

	for _, targetPath := range directoriesPaths {
		os.MkdirAll(targetPath, os.ModePerm)
	}

}



// ./cmd/new/new.go
// cmd/new.go
package new

import (
	"fmt"
	"path/filepath"

	"github.com/fatih/color"
	"github.com/golang-programming/gincli/utils"
	"github.com/spf13/cobra"
)

var (
	appName            string
	dbType             string
	dbHost             string
	dbName             string
	dbUsername         string
	dbPassword         string
	dbPort             string
	dbConnectionString string
	skipPrompts        bool
)

const (
	defaultAppName      = "my-gin-app"
	defaultDBType       = "MySQL"
	defaultDBUsername   = "root"
	defaultDBPassword   = "password"
	defaultDBName       = "default"
	defaultDBHost       = "localhost"
	defaultMySQLPort    = "3306"
	defaultPostgresPort = "5432"
)

var availableDBTypes = []string{
	"MySQL",
	"PostgresQL",
	"SQlite",
}

var NewCmd = &cobra.Command{
	Use:     "new",
	Short:   "Create a new Gin application with a project structure",
	Aliases: []string{"n", "create"},
	Run:     createNewApp,
}

func init() {
	NewCmd.Flags().StringVar(&appName, "app-name", "", fmt.Sprintf("Name of your application (default: %s)", defaultAppName))
	NewCmd.Flags().StringVar(&dbType, "db-type", "", "Database type: MySQL, PostgreSQL, SQlite (default: MySQL)")
	NewCmd.Flags().StringVar(&dbConnectionString, "db-connection-string", "", "Database connection string")
	NewCmd.Flags().StringVar(&dbHost, "db-host", "", fmt.Sprintf("Database host (default: %s)", defaultDBHost))
	NewCmd.Flags().StringVar(&dbName, "db-name", "", fmt.Sprintf("Database name (default: %s)", defaultDBName))
	NewCmd.Flags().StringVar(&dbUsername, "db-username", "", fmt.Sprintf("Database username (default: %s)", defaultDBUsername))
	NewCmd.Flags().StringVar(&dbPassword, "db-password", "", fmt.Sprintf("Database password (default: %s)", defaultDBPassword))
	NewCmd.Flags().StringVar(&dbPort, "db-port", "", "Database port (default: 3306 for MySQL, 5432 for PostgreSQL)")
	NewCmd.Flags().BoolVarP(&skipPrompts, "yes", "y", false, "Skip all prompts and use default values")
}

func createNewApp(cmd *cobra.Command, args []string) {
	if skipPrompts {
		setDefaultValues()
	} else {
		promptForValues()
	}

	projectDir := filepath.Join(".", appName)
	setupProjectDirectories()
	generateProjectFiles(projectDir)

	// Run go mod tidy with spinner
	utils.InitializeGoModule(projectDir, appName)
	utils.RunGoModTidy(projectDir)

	fmt.Println(color.New(color.FgGreen).Sprint("Application created successfully"))
	fmt.Printf("Next steps:\n")
	fmt.Printf("Go to project directory: cd %s\n", projectDir)
	fmt.Printf("Run your project: go run *.go\n")
}

func setDefaultValues() {
	if appName == "" {
		appName = defaultAppName
	}
	if dbType == "" {
		dbType = defaultDBType
	}
	if dbHost == "" {
		dbHost = defaultDBHost
	}
	if dbName == "" {
		dbName = defaultDBName
	}
	if dbUsername == "" {
		dbUsername = defaultDBUsername
	}
	if dbPassword == "" {
		dbPassword = defaultDBPassword
	}
	if dbPort == "" {
		if dbType == defaultDBType {
			dbPort = defaultPostgresPort
		} else {
			dbPort = defaultMySQLPort
		}
	}
	if dbConnectionString == "" {
		dbConnectionString = fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", dbUsername, dbPassword, dbHost, dbPort, dbName)
	}
}



// ./cmd/new/prompt.go
// cmd/prompt.go
package new

import (
	"fmt"
	"strings"

	"github.com/AlecAivazis/survey/v2"
	"github.com/fatih/color"
)

func promptForValues() {
	promptForAppName()
	promptForDBType()
	if dbConnectionString == "" {
		promptForDBConfig()
		dbConnectionString = fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", dbUsername, dbPassword, dbHost, dbPort, dbName)
	} else {
		parseConnectionString(dbConnectionString)
	}
}

func promptForAppName() {
	if appName == "" {
		fmt.Printf("Enter your app name [%s]: ", color.New(color.Faint).Sprint(defaultAppName))
		fmt.Scanln(&appName)
		if appName == "" {
			appName = defaultAppName
		}
	}
}

func promptForDBType() {
	if dbType == "" {
		prompt := &survey.Select{
			Message: fmt.Sprintf("Select your database: [%s]", color.New(color.Faint).Sprint(defaultDBType)),
			Options: availableDBTypes,
		}
		survey.AskOne(prompt, &dbType)
	}
}

func promptForDBConfig() {
	if dbUsername == "" {
		fmt.Printf("Enter DB username [%s]: ", color.New(color.Faint).Sprint(defaultDBUsername))
		fmt.Scanln(&dbUsername)
		if dbUsername == "" {
			dbUsername = defaultDBUsername
		}
	}
	if dbPassword == "" {
		fmt.Printf("Enter DB password [%s]: ", color.New(color.Faint).Sprint(defaultDBPassword))
		fmt.Scanln(&dbPassword)
		if dbPassword == "" {
			dbPassword = defaultDBPassword
		}
	}
	if dbName == "" {
		fmt.Printf("Enter DB name [%s]: ", color.New(color.Faint).Sprint(defaultDBName))
		fmt.Scanln(&dbName)
		if dbName == "" {
			dbName = defaultDBName
		}
	}
	if dbHost == "" {
		fmt.Printf("Enter DB host [%s]: ", color.New(color.Faint).Sprint(defaultDBHost))
		fmt.Scanln(&dbHost)
		if dbHost == "" {
			dbHost = defaultDBHost
		}
	}
	if dbPort == "" {
		defaultPort := defaultMySQLPort

		if strings.ToLower(dbType) == "postgresql" {
			defaultPort = defaultPostgresPort
		}

		fmt.Printf("Enter DB port [%s]: ", color.New(color.Faint).Sprint(defaultPort))
		fmt.Scanln(&dbPort)
		if dbPort == "" {
			dbPort = defaultPort
		}
	}
}

func parseConnectionString(connectionString string) {
	parts := strings.Split(connectionString, "@")
	if len(parts) == 2 {
		dbCredentials := strings.Split(parts[0], ":")
		if len(dbCredentials) == 2 {
			dbUsername = dbCredentials[0]
			dbPassword = dbCredentials[1]
		}
		dbHostAndPort := strings.Split(parts[1], "/")
		hostPort := strings.TrimPrefix(dbHostAndPort[0], "tcp(")
		hostPort = strings.TrimSuffix(hostPort, ")")
		hostPortParts := strings.Split(hostPort, ":")
		if len(hostPortParts) == 2 {
			dbHost = hostPortParts[0]
			dbPort = hostPortParts[1]
		}
		if len(dbHostAndPort) > 1 {
			dbName = dbHostAndPort[1]
		}
	}
}



// ./cmd/resource/generate.go
package resource

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/briandowns/spinner"
	"github.com/golang-programming/gincli/utils"
)

func createResourceFromTemplate() {
	templatePath := fmt.Sprintf("templates/others/resource/%s", transport)
	resourcePath := fmt.Sprintf("app/modules/%s", resourceName)
	utils.DetectModuleName()

	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Creating resource..."
	s.Start()
	defer s.Stop()

	err := filepath.Walk(templatePath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		relativePath := strings.TrimPrefix(path, templatePath)
		targetPath := filepath.Join(resourcePath, relativePath)

		if info.IsDir() {
			return os.MkdirAll(targetPath, os.ModePerm)
		}

		if strings.HasSuffix(info.Name(), ".tpl") {
			targetFile := strings.TrimSuffix(targetPath, ".tpl")
			utils.GenerateFileFromTemplate(path, targetFile, getConfig())
		}

		return nil
	})

	if err != nil {
		fmt.Printf("Error while copying templates: %v\n", err)
	}
}

func getConfig() map[string]string {

	return map[string]string{
		"CapitalizeResourceName": utils.Capitalize(resourceName),
		"ResourceName":           strings.ToLower(resourceName),
		"Module":                 utils.DetectModuleName(),
	}
}



// ./cmd/resource/prompt.go
package resource

import (
	"fmt"
	"log"

	"github.com/AlecAivazis/survey/v2"

	"github.com/fatih/color"
)

func promptForValues() {
	promptForResourceName()
	promptForTransport()
}

func promptForResourceName() {
	if resourceName == "" {
		fmt.Printf("Enter resource name (e.g, [%s]): ", color.New(color.Faint).Sprint("user"))
		fmt.Scanln(&resourceName)
		if resourceName == "" {
			log.Fatalf("Please enter a resource name")
		}
	}
}

func promptForTransport() {
	if transport == "" {
		prompt := &survey.Select{
			Message: fmt.Sprintf("What transport layer do you use? [%s]", color.New(color.Faint).Sprint(defaultTransport)),
			Options: availableTransports,
		}
		survey.AskOne(prompt, &transport)
	}
}



// ./cmd/resource/resource.go
package resource

import (
	"fmt"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

var (
	resourceName string
	transport    string
	skipPrompts  bool
)
var availableTransports = []string{"restful", "graphql", "webSockets"}

var (
	defaultTransport = "restful"
)

var ResourceCmd = &cobra.Command{
	Use:     "resource",
	Short:   "Create a resource with pre-defined components",
	Run:     createResource,
	Aliases: []string{"res", "create"},
}

func init() {
	ResourceCmd.Flags().StringVar(&transport, "transport", "", "Available transports are ('restful', 'graphql', 'webSockets')")
	ResourceCmd.Flags().BoolVarP(&skipPrompts, "yes", "y", false, "Skip all prompts and use default values")
}

func createResource(cmd *cobra.Command, args []string) {
	if skipPrompts {
		setDefaultValues()
	} else {
		promptForValues()
	}

	createResourceFromTemplate()

	// runGoModTidy(projectDir)

	fmt.Println(color.New(color.FgGreen).Sprint("Resource created successfully"))
}

func setDefaultValues() {
	if transport == "" {
		transport = defaultTransport
	}
}



// ./cmd/root.go
package cmd

import (
	"os"

	"github.com/golang-programming/gincli/cmd/new"
	"github.com/golang-programming/gincli/cmd/resource"
	"github.com/golang-programming/gincli/cmd/template"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "gincli",
	Short: "CLI to generate Gin applications with different components",
	Long:  `A CLI tool that can be helpful to generate gin app and its components`,
}

// Execute adds all child commands to the root command and sets flags appropriately.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}

func init() {
	rootCmd.AddCommand(template.TemplateCmd)
	rootCmd.AddCommand(new.NewCmd)
	rootCmd.AddCommand(resource.ResourceCmd)
	// Removed: rootCmd.AddCommand(helpCmd)
}



// ./cmd/template/generate.go
package template

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/briandowns/spinner"
	"github.com/golang-programming/gincli/utils"
)

func createProjectFromTemplate(templateDir, projectDir string) {
	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Creating project structure..."
	s.Start()
	defer s.Stop()

	err := filepath.Walk(templateDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		relativePath := strings.TrimPrefix(path, templateDir)
		targetPath := filepath.Join(projectDir, relativePath)

		if info.IsDir() {
			return os.MkdirAll(targetPath, os.ModePerm)
		}

		if strings.HasSuffix(info.Name(), ".tpl") {
			targetFile := strings.TrimSuffix(targetPath, ".tpl")
			utils.GenerateFileFromTemplate(path, targetFile, getConfig())
		}

		return nil
	})

	if err != nil {
		fmt.Printf("Error while copying templates: %v\n", err)
	}
}

func getConfig() map[string]string {
	return map[string]string{
		"DBUsername": dbUsername,
		"DBPassword": dbPassword,
		"DBName":     dbName,
		"DBHost":     dbHost,
		"DBPort":     dbPort,
		"Module":     appName,
		"Template":   strings.ToLower(templateChoice),
		"DBDriver":   strings.ToLower(dbType),
	}
}



// ./cmd/template/prompt.go
package template

import (
	"fmt"
	"strings"

	"github.com/AlecAivazis/survey/v2"
	"github.com/fatih/color"
)

func promptForValues() {
	promptForAppName()
	promptForTemplate()
	promptForDBType()
	if dbConnectionString == "" {
		promptForDBConfig()
		dbConnectionString = fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", dbUsername, dbPassword, dbHost, dbPort, dbName)
	} else {
		parseConnectionString(dbConnectionString)
	}
}

func promptForTemplate() {
	if templateChoice == "" {
		prompt := &survey.Select{
			Message: fmt.Sprintf("Select a template you want to use: [%s]", color.New(color.Faint).Sprint(defaultTemplateChoice)),
			Options: availableTemplates,
		}
		survey.AskOne(prompt, &templateChoice)
	}
}

func promptForAppName() {
	if appName == "" {
		fmt.Printf("Enter your app name [%s]: ", color.New(color.Faint).Sprint(defaultAppName))
		fmt.Scanln(&appName)
		if appName == "" {
			appName = defaultAppName
		}
	}
}

func promptForDBType() {
	if dbType == "" {
		prompt := &survey.Select{
			Message: fmt.Sprintf("Select your database: [%s]", color.New(color.Faint).Sprint(defaultDBType)),
			Options: availableDBTypes,
		}
		survey.AskOne(prompt, &dbType)
	}
}

func promptForDBConfig() {
	if dbUsername == "" {
		fmt.Printf("Enter DB username [%s]: ", color.New(color.Faint).Sprint(defaultDBUsername))
		fmt.Scanln(&dbUsername)
		if dbUsername == "" {
			dbUsername = defaultDBUsername
		}
	}
	if dbPassword == "" {
		fmt.Printf("Enter DB password [%s]: ", color.New(color.Faint).Sprint(defaultDBPassword))
		fmt.Scanln(&dbPassword)
		if dbPassword == "" {
			dbPassword = defaultDBPassword
		}
	}
	if dbName == "" {
		fmt.Printf("Enter DB name [%s]: ", color.New(color.Faint).Sprint(defaultDBName))
		fmt.Scanln(&dbName)
		if dbName == "" {
			dbName = defaultDBName
		}
	}
	if dbHost == "" {
		fmt.Printf("Enter DB host [%s]: ", color.New(color.Faint).Sprint(defaultDBHost))
		fmt.Scanln(&dbHost)
		if dbHost == "" {
			dbHost = defaultDBHost
		}
	}
	if dbPort == "" {
		defaultPort := defaultMySQLPort
		if strings.ToLower(dbType) == "postgresql" {
			defaultPort = defaultPostgresPort
		}
		fmt.Printf("Enter DB port [%s]: ", color.New(color.Faint).Sprint(defaultPort))
		fmt.Scanln(&dbPort)
		if dbPort == "" {
			dbPort = defaultPort
		}
	}
}

func parseConnectionString(connectionString string) {
	parts := strings.Split(connectionString, "@")
	if len(parts) == 2 {
		dbCredentials := strings.Split(parts[0], ":")
		if len(dbCredentials) == 2 {
			dbUsername = dbCredentials[0]
			dbPassword = dbCredentials[1]
		}
		dbHostAndPort := strings.Split(parts[1], "/")
		hostPort := strings.TrimPrefix(dbHostAndPort[0], "tcp(")
		hostPort = strings.TrimSuffix(hostPort, ")")
		hostPortParts := strings.Split(hostPort, ":")
		if len(hostPortParts) == 2 {
			dbHost = hostPortParts[0]
			dbPort = hostPortParts[1]
		}
		if len(dbHostAndPort) > 1 {
			dbName = dbHostAndPort[1]
		}
	}
}



// ./cmd/template/template.go
// cmd/new.go
package template

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/briandowns/spinner"
	"github.com/fatih/color"
	"github.com/golang-programming/gincli/utils"
	"github.com/spf13/cobra"
)

var (
	appName            string
	dbType             string
	dbHost             string
	dbName             string
	dbUsername         string
	dbPassword         string
	dbPort             string
	dbConnectionString string
	skipPrompts        bool
	templateChoice     string
)

const (
	defaultAppName        = "my-gin-app"
	defaultDBUsername     = "root"
	defaultDBType         = "MySQL"
	defaultDBPassword     = "password"
	defaultDBName         = "default"
	defaultDBHost         = "localhost"
	defaultMySQLPort      = "3306"
	defaultPostgresPort   = "5432"
	defaultTemplateChoice = "Standard"
)

var availableTemplates = []string{"standard"}

var availableDBTypes = []string{
	"MySQL",
	"PostgresQL",
}

var TemplateCmd = &cobra.Command{
	Use:   "template",
	Short: "Load application startup template",
	Run:   loadTemplate,
}

func init() {
	TemplateCmd.Flags().StringVar(&templateChoice, "template", "", fmt.Sprintf("Template: Standard (default: %s)", defaultTemplateChoice))
	TemplateCmd.Flags().StringVar(&appName, "app-name", "", fmt.Sprintf("Name of your application (default: %s)", defaultAppName))
	TemplateCmd.Flags().StringVar(&dbType, "db-type", "", "Database type: MySQL, PostgreSQL")
	TemplateCmd.Flags().StringVar(&dbConnectionString, "db-connection-string", "", "Database connection string")
	TemplateCmd.Flags().StringVar(&dbHost, "db-host", "", fmt.Sprintf("Database host (default: %s)", defaultDBHost))
	TemplateCmd.Flags().StringVar(&dbName, "db-name", "", fmt.Sprintf("Database name (default: %s)", defaultDBName))
	TemplateCmd.Flags().StringVar(&dbUsername, "db-username", "", fmt.Sprintf("Database username (default: %s)", defaultDBUsername))
	TemplateCmd.Flags().StringVar(&dbPassword, "db-password", "", fmt.Sprintf("Database password (default: %s)", defaultDBPassword))
	TemplateCmd.Flags().StringVar(&dbPort, "db-port", "", "Database port (default: 3306 for MySQL, 5432 for PostgreSQL)")
	TemplateCmd.Flags().BoolVarP(&skipPrompts, "yes", "y", false, "Skip all prompts and use default values")
}

func loadTemplate(cmd *cobra.Command, args []string) {
	if skipPrompts {
		setDefaultValues()
	} else {
		promptForValues()
	}

	projectDir := filepath.Join(".", appName)
	createProjectFromTemplate(fmt.Sprintf("templates/templates/%s", strings.ToLower(templateChoice)), projectDir)

	utils.InitializeGoModule(projectDir, appName)

	// Run go mod tidy with spinner
	runGoModTidy(projectDir)

	fmt.Println(color.New(color.FgGreen).Sprint("Template loaded successfully"))
	fmt.Printf("Next steps:\n")
	fmt.Printf("Go to project directory: cd %s\n", projectDir)
	fmt.Printf("Run your project: go run *.go\n")
}

func runGoModTidy(projectDir string) {
	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Running `go mod tidy`..."
	s.Start()
	defer s.Stop()

	cmd := exec.Command("go", "mod", "tidy")
	cmd.Dir = projectDir
	err := cmd.Run()
	if err != nil {
		fmt.Printf("Error running `go mod tidy`: %v\n", err)
		os.Exit(1)
	}

	s.Stop()
	fmt.Println(color.New(color.FgGreen).Sprint("`go mod tidy` completed successfully."))
}

func setDefaultValues() {
	if templateChoice == "" {
		templateChoice = defaultTemplateChoice
	}
	if appName == "" {
		appName = defaultAppName
	}
	if dbType == "" {
		dbType = defaultDBType
	}
	if dbHost == "" {
		dbHost = defaultDBHost
	}
	if dbName == "" {
		dbName = defaultDBName
	}
	if dbUsername == "" {
		dbUsername = defaultDBUsername
	}
	if dbPassword == "" {
		dbPassword = defaultDBPassword
	}
	if dbPort == "" {
		if strings.ToLower(dbType) == "postgresql" {
			dbPort = defaultPostgresPort
		} else {
			dbPort = defaultMySQLPort
		}
	}
	if dbConnectionString == "" {
		dbConnectionString = fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", dbUsername, dbPassword, dbHost, dbPort, dbName)
	}
}



// ./go.mod
module github.com/golang-programming/gincli

go 1.23.1

require (
	github.com/AlecAivazis/survey/v2 v2.3.7
	github.com/briandowns/spinner v1.23.1
	github.com/fatih/color v1.17.0
	github.com/spf13/cobra v1.8.1
)

require (
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect
	github.com/spf13/pflag v1.0.5 // indirect
	golang.org/x/sys v0.25.0 // indirect
	golang.org/x/term v0.24.0 // indirect
	golang.org/x/text v0.18.0 // indirect
)



// ./go.sum
github.com/AlecAivazis/survey/v2 v2.3.7 h1:6I/u8FvytdGsgonrYsVn2t8t4QiRnh6QSTqkkhIiSjQ=
github.com/AlecAivazis/survey/v2 v2.3.7/go.mod h1:xUTIdE4KCOIjsBAE1JYsUPoCqYdZ1reCfTwbto0Fduo=
github.com/Netflix/go-expect v0.0.0-20220104043353-73e0943537d2 h1:+vx7roKuyA63nhn5WAunQHLTznkw5W8b1Xc0dNjp83s=
github.com/Netflix/go-expect v0.0.0-20220104043353-73e0943537d2/go.mod h1:HBCaDeC1lPdgDeDbhX8XFpy1jqjK0IBG8W5K+xYqA0w=
github.com/briandowns/spinner v1.23.1 h1:t5fDPmScwUjozhDj4FA46p5acZWIPXYE30qW2Ptu650=
github.com/briandowns/spinner v1.23.1/go.mod h1:LaZeM4wm2Ywy6vO571mvhQNRcWfRUnXOs0RcKV0wYKM=
github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/creack/pty v1.1.17 h1:QeVUsEDNrLBW4tMgZHvxy18sKtr6VI492kBhUfhDJNI=
github.com/creack/pty v1.1.17/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
github.com/hinshun/vt10x v0.0.0-20220119200601-820417d04eec h1:qv2VnGeEQHchGaZ/u7lxST/RaJw+cv273q79D81Xbog=
github.com/hinshun/vt10x v0.0.0-20220119200601-820417d04eec/go.mod h1:Q48J4R4DvxnHolD5P8pOtXigYlRuPLGl6moFx3ulM68=
github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=
github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=
github.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=
github.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d h1:5PJl274Y63IEHC+7izoQE9x6ikvDFZS2mDVS3drnohI=
github.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=
github.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=
github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=
golang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang.org/x/term v0.24.0 h1:Mh5cbb+Zk2hqqXNO7S1iTjEphVL+jb8ZWaqh/g+JWkM=
golang.org/x/term v0.24.0/go.mod h1:lOBK/LVxemqiMij05LGJ0tzNr8xlmwBRJ81PX6wVLH8=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
golang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
golang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=
golang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=



// ./main.go
package main

import "github.com/golang-programming/gincli/cmd"

func main() {
    cmd.Execute()
}



// ./readme.md
# Gin CLI - Scaffold Your Gin Application

This CLI tool helps you quickly set up [Gin Web Framework](https://gin-gonic.com/) application with a predefined project structure and components. so you can focus on building your application.

## Features

- **Quick Scaffold**: Generate a new Gin application with a standard project layout.
- **Database Configuration**: Supports MySQL, PostgreSQL, SQLite, and MongoDB.
- **User-Friendly**: Includes prompts with default values better UX.

## Installation

1. **Install in your machine**

   ```bash
   git clone https://github.com/golang-programming/gincli.git
   cd gincli
   go build -o gin
   mv gin /usr/local/bin/
   ```

## Usage

Generate a new Gin application by running:

```bash
gin new [flags]
```

### Available Flags

- `--app-name`: Name of your application (default: `my-gin-app`).
- `--db-type`: Database type (`1`: MySQL, `2`: PostgreSQL, `3`: SQLite, `4`: MongoDB).
- `--db-connection-string`: Custom database connection string.
- `--db-host`: Database host (default: `localhost`).
- `--db-name`: Database name (default: `default`).
- `--db-username`: Database username (default: `root`).
- `--db-password`: Database password (default: `password`).
- `--db-port`: Database port (default varies by DB type).
- `-y`, `--yes`: Skip prompts and use default values.

### Examples

1. **Create a New Application with Defaults**

   ```bash
   gin new
   ```

2. **Create a New Application with Custom Name**

   ```bash
   gin new --app-name myapp
   ```

3. **Specify Database Type and Credentials**

   ```bash
   gin new --db-type 2 --db-username user --db-password pass
   ```

4. **Use a Custom Database Connection String**

   ```bash
   gin new --db-connection-string "user:pass@tcp(localhost:3306)/dbname"
   ```

5. **Skip All Prompts**

   ```bash
   gin new --yes
   ```

## Running the Application

1. **Navigate to the Project Directory**

   ```bash
   cd my-gin-app
   ```

2. **Run the Application**

   ```bash
   go run *.go
   ```

## Notes

- Ensure you have [Go](https://golang.org/dl/) installed (version 1.16 or later).
- The CLI automatically runs `go mod tidy` to manage dependencies.
- Check that all environment variables are correctly set in the `.env` file.
- If you encounter any issue, Feel free to open issue
- For support mail me on [email](zeshanshakil0@gmail.com)



// ./templates/new-app/app/controller/controller.go.tpl
package controller

import (
    "github.com/gin-gonic/gin"
    "{{.Module}}/app/service"
)

func Create(c *gin.Context) {
    message := service.Create()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func GetAll(c *gin.Context) {
    message := service.GetAll()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func GetById(c *gin.Context) {
    // get ID from params
    id := c.Param("id")
    message := service.GetById(id)
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Update(c *gin.Context) {
    message := service.Update()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Delete(c *gin.Context) {
    message := service.Delete()
    c.JSON(200, gin.H{
        "message": message,
    })
}


// ./templates/new-app/app/pkg/database/database.go.tpl
package database

import (
	"fmt"
	"log"
	"os"

	"gorm.io/driver/{{.DBDriver}}"
	"gorm.io/gorm"
)

var DB *gorm.DB

func init() {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local",
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_HOST"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_NAME"))

	db, err := gorm.Open({{.DBDriver}}.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	DB = db
}


// ./templates/new-app/app/pkg/database/sqlite-database.go.tpl
package database

import (
	"log"

	"gorm.io/glebarez/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

func init() {
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	DB = db
}



// ./templates/new-app/app/resolver/resolver.go.tpl
package resolver

import (
	"context"
)

type Resolver struct{}

func (r *Resolver) QueryExample(ctx context.Context) (string, error) {
	return "GraphQL Query Example", nil
}

func (r *Resolver) MutationExample(ctx context.Context) (string, error) {
	return "GraphQL Mutation Example", nil
}



// ./templates/new-app/app/service/service.go.tpl
package service

import "fmt"

func Create() string {
    return fmt.Sprintf("Create operation successfully performed")
}
func GetAll() string {
    return fmt.Sprintf("Fetched all records successfully")
}
func GetById(id string) string {
    return fmt.Sprintf("Fetched record with ID: %s", id)
}
func Update() string {
    return fmt.Sprintf("Update operation successfully performed")
}
func Delete() string {
    return fmt.Sprintf("Delete operation successfully performed")
}


// ./templates/new-app/app/utils/sum-to-numbers.go.tpl
package utils

func SumTwoNumbers(a int, b int) int {
    return a + b
}


// ./templates/new-app/docker-compose.yml.tpl
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "{{.AppName}}_app"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=3306
    ports:
      - "8080:8080"
    depends_on:
      - db

  db:
    image: mysql:5.7
    container_name: "{{.AppName}}_db"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:



// ./templates/new-app/Dockerfile.tpl
FROM golang:1.19 as builder

WORKDIR /app

COPY go.mod go.sum ./

RUN go mod download

COPY . .

RUN go build -o /docker-app

FROM alpine:latest

RUN apk --no-cache add ca-certificates

WORKDIR /root/

COPY --from=builder /docker-app .

COPY .env .

EXPOSE 8080

CMD ["./docker-app"]



// ./templates/new-app/graphql-main.go.tpl
package main

import (
	"os"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/gin-gonic/gin"
	"{{.Module}}/app/resolver"
)

func main() {
	app := gin.Default()

	// Load port from .env
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not specified in .env
	}

	router := app.Group("/api")

	srv := handler.NewDefaultServer(resolver.NewExecutableSchema(resolver.Config{Resolvers: &resolver.Resolver{}}))
	router.POST("/graphql", gin.WrapH(srv))
	router.GET("/playground", gin.WrapH(playground.Handler("GraphQL Playground", "/graphql")))

	app.Run(":" + port)
}



// ./templates/new-app/loadEnv.go.tpl
package main

import (
	"fmt"
	"github.com/joho/godotenv"
)

func LoadEnv() {
	fmt.Println("Loading environment variables from a configuration file")
	godotenv.Load()
}


// ./templates/new-app/main.go.tpl
package main

import (
    "github.com/gin-gonic/gin"
    "os"
)

func main() {
    app := gin.Default()

    // Load port from .env
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080" // Default port if not specified in .env
    }

    router := app.Group("/api")
    SetupRoutes(router)

    app.Run(":" + port)
}


// ./templates/new-app/routes.go.tpl
package main

import (
    "github.com/gin-gonic/gin"
    "{{.Module}}/app/controller"
)

func SetupRoutes(r *gin.RouterGroup) {
    r.POST("/", controller.Create)
    r.GET("/", controller.GetAll)
    r.GET("/:id", controller.GetById)
    r.PUT("/", controller.Update)
    r.DELETE("/", controller.Delete)
}


// ./templates/others/controller.go.tpl



// ./templates/others/dto.go.tpl



// ./templates/others/guard.go.tpl



// ./templates/others/middleware.go.tpl



// ./templates/others/resolver.go.tpl



// ./templates/others/resource/restful/controllers/controller.go.tpl
package controller

import (
    "github.com/gin-gonic/gin"
    "{{.Module}}/app/modules/{{.ResourceName}}/dtos"
    "{{.Module}}/app/modules/{{.ResourceName}}/services"
)

func Create{{.CapitalizeResourceName}}(c *gin.Context) {
    var input dtos.Create{{.CapitalizeResourceName}}Input
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

    message := service.Create{{.CapitalizeResourceName}}(input)
    c.JSON(200, gin.H{
        "message": message,
    })
}

func GetAll{{.CapitalizeResourceName}}s(c *gin.Context) {
    message := service.GetAll{{.CapitalizeResourceName}}s()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Get{{.CapitalizeResourceName}}ById(c *gin.Context) {
    ID := c.Param("id")

    message := service.Get{{.CapitalizeResourceName}}ById(ID)
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Update{{.CapitalizeResourceName}}(c *gin.Context) {
    ID := c.Param("id")
    var input dtos.Update{{.CapitalizeResourceName}}Input
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

    message := service.Update{{.CapitalizeResourceName}}(ID, input)
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Delete{{.CapitalizeResourceName}}(c *gin.Context) {
    ID := c.Param("id")

    message := service.Delete{{.CapitalizeResourceName}}(ID)
    c.JSON(200, gin.H{
        "message": message,
    })
}


// ./templates/others/resource/restful/dtos/dto.go.tpl
package dtos

type Create{{.CapitalizeResourceName}}Input struct {
	Name         string            `json:"name" binding:"required"`
}


type Update{{.CapitalizeResourceName}}Input struct {
	Name         string            `json:"name" binding:"omitempty"`
}



// ./templates/others/resource/restful/entities/entity.go.tpl
package entities

type {{.CapitalizeResourceName}} struct {
	ID        uint           `gorm:"primaryKey;autoIncrement"`
}


// ./templates/others/resource/restful/routes.go.tpl
package food

import (
	"github.com/gin-gonic/gin"
	"{{.Module}}/app/modules/{{.ResourceName}}/controllers"
)

func RegisterRoutes(router *gin.RouterGroup) {
	groupRouter := router.Group("/{{.ResourceName}}")

	groupRouter.POST("/", controllers.Create{{.CapitalizeResourceName}})
	groupRouter.GET("/:id", controllers.Get{{.CapitalizeResourceName}}ByID)
	groupRouter.PUT("/:id", controllers.Update{{.CapitalizeResourceName}})
	groupRouter.DELETE("/:id", controllers.Delete{{.CapitalizeResourceName}})
	groupRouter.GET("/", controllers.List{{.CapitalizeResourceName}}s)
}



// ./templates/others/resource/restful/services/service.go.tpl
package services

import (
    "fmt"
    "{{.Module}}/app/modules/{{.ResourceName}}/dtos"
)

func Create{{.CapitalizeResourceName}}(input dtos.Create{{.CapitalizeResourceName}}Input) string {
    return fmt.Sprintf("Create {{.ResourceName}} successfully")
}

func GetAll{{.CapitalizeResourceName}}s() string {
    return fmt.Sprintf("Fetched all  {{.ResourceName}} successfully")
}

func Get{{.CapitalizeResourceName}}ById(ID string) string {
    return fmt.Sprintf("Fetched  {{.ResourceName}} with ID: %s", ID)
}

func Update{{.CapitalizeResourceName}}(ID string,input dtos.Update{{.CapitalizeResourceName}}Input) string {
    return fmt.Sprintf("Update  {{.ResourceName}} successfully")
}

func Delete{{.CapitalizeResourceName}}(ID string, ) string {
    return fmt.Sprintf("Delete  {{.ResourceName}} successfully")
}


// ./templates/others/service.go.tpl



// ./templates/templates/standard/app/controller/controller.go.tpl
package controller

import (
    "github.com/gin-gonic/gin"
    "{{.Module}}/app/service"
)

func Create(c *gin.Context) {
    message := service.Create()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func GetAll(c *gin.Context) {
    message := service.GetAll()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func GetById(c *gin.Context) {
    // get ID from params
    id := c.Param("id")
    message := service.GetById(id)
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Update(c *gin.Context) {
    message := service.Update()
    c.JSON(200, gin.H{
        "message": message,
    })
}

func Delete(c *gin.Context) {
    message := service.Delete()
    c.JSON(200, gin.H{
        "message": message,
    })
}


// ./templates/templates/standard/app/pkg/database/database.go.tpl
package database

import (
	"fmt"
	"log"
	"os"

	"gorm.io/driver/{{.DBDriver}}"
	
	"gorm.io/gorm"
)

var DB *gorm.DB

func init() {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local",
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_HOST"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_NAME"))

	db, err := gorm.Open({{.DBDriver}}.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	DB = db
}


// ./templates/templates/standard/app/service/service.go.tpl
package service

import "fmt"

func Create() string {
    return fmt.Sprintf("Create operation successfully performed")
}
func GetAll() string {
    return fmt.Sprintf("Fetched all records successfully")
}
func GetById(id string) string {
    return fmt.Sprintf("Fetched record with ID: %s", id)
}
func Update() string {
    return fmt.Sprintf("Update operation successfully performed")
}
func Delete() string {
    return fmt.Sprintf("Delete operation successfully performed")
}


// ./templates/templates/standard/app/utils/sum-to-numbers.go.tpl
package utils

func SumTwoNumbers(a int, b int) int {
    return a + b
}


// ./templates/templates/standard/docker-compose.yml.tpl
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "{{.AppName}}_app"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=3306
    ports:
      - "8080:8080"
    depends_on:
      - db

  db:
    image: mysql:5.7
    container_name: "{{.AppName}}_db"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:



// ./templates/templates/standard/Dockerfile.tpl
FROM golang:1.19 as builder

WORKDIR /app

COPY go.mod go.sum ./

RUN go mod download

COPY . .

RUN go build -o /docker-app

FROM alpine:latest

RUN apk --no-cache add ca-certificates

WORKDIR /root/

COPY --from=builder /docker-app .

COPY .env .

EXPOSE 8080

CMD ["./docker-app"]



// ./templates/templates/standard/loadEnv.go.tpl
package main

import (
	"fmt"
	"github.com/joho/godotenv"
)

func LoadEnv() {
	fmt.Println("Loading environment variables from a configuration file")
	godotenv.Load()
}


// ./templates/templates/standard/main.go.tpl
package main

import (
    "github.com/gin-gonic/gin"
    "os"
)

func main() {
    app := gin.Default()

    // Load port from .env
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080" // Default port if not specified in .env
    }

    router := app.Group("/api")
    SetupRoutes(router)

    app.Run(":" + port)
}


// ./templates/templates/standard/routes.go.tpl
package main

import (
    "github.com/gin-gonic/gin"
    "{{.Module}}/app/controller"
)

func SetupRoutes(r *gin.RouterGroup) {
    r.POST("/", controller.Create)
    r.GET("/", controller.GetAll)
    r.GET("/:id", controller.GetById)
    r.PUT("/", controller.Update)
    r.DELETE("/", controller.Delete)
}


// ./utils/capitalize.go
package utils

import "strings"

func Capitalize(text string) string {
	words := strings.Fields(text)
	for i, word := range words {
		words[i] = strings.ToUpper(string(word[0])) + strings.ToLower(word[1:])
	}
	return strings.Join(words, " ")
}



// ./utils/detect-module.go
package utils

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func DetectModuleName() string {
	goModPath, err := filepath.Abs("go.mod")
	fmt.Println("goModPath", goModPath)
	if err != nil {
		log.Fatal("Error determining the absolute path of go.mod: ", err)
	}

	file, err := os.Open(goModPath)
	if err != nil {
		log.Fatalf("Error opening go.mod file. Please ensure you are in the root directory of your project. Error: %v", err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "module") {
			moduleName := strings.TrimSpace(strings.TrimPrefix(line, "module"))
			if moduleName != "" {
				return moduleName
			}
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatalf("Error reading go.mod file: %v", err)
	}

	log.Fatal("Module name not found in go.mod. Please ensure you are in the root directory of your project and that the go.mod file contains a valid module name.")
	return ""
}



// ./utils/file_writer.go
package utils

import (
	"fmt"
	"os"
	"os/exec"
	"text/template"
)

// InitializeGoModule initializes the Go module without changing the working directory
func InitializeGoModule(projectDir, appName string) {
	// Instead of changing the working directory, use the full path for go mod init
	cmd := exec.Command("go", "mod", "init", appName)
	cmd.Dir = projectDir // Set the directory where the command should run
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Printf("Error initializing Go module: %s\n", string(output))
		return
	}

	fmt.Println("Go module initialized successfully!")
}

// GenerateFileFromTemplate generates a file from a template using explicit paths
func GenerateFileFromTemplate(templatePath, outputPath string, data map[string]string) {
	// Print the paths for debugging
	// cwd, _ := os.Getwd()
	// fmt.Println("Current working directory:", cwd)
	// fmt.Println("Looking for template at:", templatePath)
	// fmt.Println("Generating file at:", outputPath)

	tmpl, err := template.ParseFiles(templatePath)
	if err != nil {
		fmt.Printf("Error parsing template: %s\n", err)
		return
	}

	outputFile, err := os.Create(outputPath)
	if err != nil {
		fmt.Printf("Error creating file: %s\n", err)
		return
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, data)
	if err != nil {
		fmt.Printf("Error executing template: %s\n", err)
		return
	}

	// fmt.Printf("Generated file: %s\n", outputPath)
}



// ./utils/run-go-mod-tidy.go
package utils

import (
	"fmt"
	"os"
	"os/exec"
	"time"

	"github.com/briandowns/spinner"
	"github.com/fatih/color"
)

func RunGoModTidy(projectDir string) {
	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Running `go mod tidy`..."
	s.Start()
	defer s.Stop()

	cmd := exec.Command("go", "mod", "tidy")
	cmd.Dir = projectDir
	err := cmd.Run()
	if err != nil {
		fmt.Printf("Error running `go mod tidy`: %v\n", err)
		os.Exit(1)
	}

	s.Stop()
	fmt.Println(color.New(color.FgGreen).Sprint("`go mod tidy` completed successfully."))
}



